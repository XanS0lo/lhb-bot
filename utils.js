// utils.js

const sqlite3 = require("sqlite3").verbose();
const db = new sqlite3.Database("./message.db");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
function getMessagesFromLast24Hours(callback) {
  const since = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–∏–Ω—É—Å 24 —á–∞—Å–∞

  db.all(
    `SELECT * FROM information WHERE created >= ?`,
    [since],
    (err, rows) => {
      if (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ –ë–î:", err.message);
        return;
      }
      callback(rows); // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ callback
    }
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞
function generatePrompt(messages) {
  let prompt = "–û—Ç—á—ë—Ç –ø–æ —á–∞—Ç—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å:\n\n";

  // –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  const problems = []; // –ü—Ä–æ–±–ª–µ–º—ã
  const apartments = {}; // –ö–≤–∞—Ä—Ç–∏—Ä—ã
  const activeUsers = {}; // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏

  messages.forEach((msg) => {
    const { author, message, time } = msg;

    // –ü—Ä–æ–±–ª–µ–º—ã ‚Äî –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
    if (
      message.toLowerCase().includes("–ø—Ä–æ–±–ª–µ–º–∞") ||
      message.toLowerCase().includes("–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç") ||
      message.toLowerCase().includes("—Å–ª–æ–º–∞–Ω–æ") ||
      message.toLowerCase().includes("–Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è") ||
      message.toLowerCase().includes("–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    ) {
      problems.push(`${message}`);
    }

    // –ö–≤–∞—Ä—Ç–∏—Ä—ã ‚Äî –∏—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã
    const aptMatch = message.match(/\b–∫–≤\.*\s*(\d+)|–∫–≤–∞—Ä—Ç–∏—Ä–∞\s*(\d+)/gi);
    if (aptMatch) {
      aptMatch.forEach((apt) => {
        apartments[apt] = (apartments[apt] || 0) + 1;
      });
    }

    // –ü–æ–¥—Å—á—ë—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    activeUsers[author] = (activeUsers[author] || 0) + 1;

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    prompt += `[${time}] ${author}: ${message}\n`;
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
  if (problems.length > 0) {
    prompt += "\nüí¨ –ü—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Å—É–∂–¥–∞–ª–∏ –∂–∏–ª—å—Ü—ã:\n";
    problems.forEach((problem) => {
      prompt += `  - ${problem}\n`;
    });
    console.log("üö® –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: ");
    problems.forEach((problem) => {
      console.log(`  - ${problem}`);
    });
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö
  prompt += "\nüè† –ö–≤–∞—Ä—Ç–∏—Ä—ã, —É–ø–æ–º—è–Ω—É—Ç—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:\n";
  Object.entries(apartments).forEach(([apt, count]) => {
    prompt += `  - ${apt}: ${count} —Å–æ–æ–±—â–µ–Ω–∏–π\n`;
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  prompt += "\nüë§ –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∂–∏–ª—å—Ü—ã:\n";
  Object.entries(activeUsers).forEach(([author, count]) => {
    prompt += `  - ${author}: ${count} —Å–æ–æ–±—â–µ–Ω–∏–π\n`;
  });

  // –ó–∞–≤–µ—Ä—à–∞—é—â–∞—è —á–∞—Å—Ç—å
  prompt += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.";

  return prompt;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
module.exports = {
  getMessagesFromLast24Hours,
  generatePrompt,
};
