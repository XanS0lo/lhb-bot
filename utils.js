const sqlite3 = require("sqlite3").verbose();
const { default: ollama } = require("ollama");
const db = new sqlite3.Database("./message.db");

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è
async function generateEmbedding(text) {
  const response = await ollama.embeddings({
    model: "paraphrase-multilingual",
    prompt: text,
  });
  return response.embedding;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è
async function storeEmbedding(id, text) {
  const vector = await generateEmbedding(text);
  return new Promise((resolve, reject) => {
    db.run(
      `INSERT OR REPLACE INTO message_vectors (id, vector) VALUES (?, ?)`,
      [id, Buffer.from(vector)],
      (err) => {
        if (err) {
          console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∞:", err.message);
          reject(err);
        } else {
          console.log(`–í–µ–∫—Ç–æ—Ä –¥–ª—è id ${id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.`);
          resolve();
        }
      }
    );
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
function getMessagesFromLast24Hours(callback) {
  const since = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();

  db.all(
    `SELECT id, author, message, time, created FROM information WHERE created >= ?`,
    [since],
    async (err, rows) => {
      if (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ –ë–î:", err.message);
        return;
      }
      for (const row of rows) {
        await storeEmbedding(row.id, row.message);
      }
      callback(rows);
    }
  );
}

// –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–π
async function findSimilarEmbeddings(queryText, threshold = 0.8) {
  const queryVector = await generateEmbedding(queryText);

  return new Promise((resolve, reject) => {
    db.all(`SELECT id, vector FROM message_vectors`, [], (err, rows) => {
      if (err) {
        reject(err);
        return;
      }

      const similarMessages = [];
      for (const row of rows) {
        const storedVector = new Float32Array(row.vector.buffer);
        const similarity = cosineSimilarity(queryVector, storedVector);

        if (similarity >= threshold) {
          similarMessages.push({ id: row.id, similarity });
        }
      }

      if (similarMessages.length > 0) {
        const ids = similarMessages.map((m) => m.id).join(",");
        db.all(
          `SELECT id, author, message, time, created FROM information WHERE id IN (${ids})`,
          [],
          (err, messages) => {
            if (err) {
              reject(err);
              return;
            }
            resolve(
              messages
                .map((msg) => ({
                  ...msg,
                  similarity: similarMessages.find((m) => m.id === msg.id)
                    .similarity,
                }))
                .sort((a, b) => b.similarity - a.similarity)
            );
          }
        );
      } else {
        resolve([]);
      }
    });
  });
}

// –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
function cosineSimilarity(vec1, vec2) {
  const dotProduct = vec1.reduce((sum, val, i) => sum + val * vec2[i], 0);
  const magnitude1 = Math.sqrt(vec1.reduce((sum, val) => sum + val * val, 0));
  const magnitude2 = Math.sqrt(vec2.reduce((sum, val) => sum + val * val, 0));
  return magnitude1 && magnitude2 ? dotProduct / (magnitude1 * magnitude2) : 0;
}

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞
function generatePrompt(messages) {
  let prompt = "–û—Ç—á—ë—Ç –ø–æ —á–∞—Ç—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å:\n\n";

  const problems = [];
  const apartments = {};
  const activeUsers = {};

  messages.forEach((msg) => {
    const { author = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π", message, time = "–ù–µ —É–∫–∞–∑–∞–Ω–æ" } = msg;

    // –ü—Ä–æ–±–ª–µ–º—ã
    if (
      message.toLowerCase().includes("–ø—Ä–æ–±–ª–µ–º–∞") ||
      message.toLowerCase().includes("–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç") ||
      message.toLowerCase().includes("—Å–ª–æ–º–∞–Ω–æ") ||
      message.toLowerCase().includes("–Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è")
    ) {
      problems.push(`${message}`);
    }
    if (message.toLowerCase().includes("–≤–æ–¥–∞")) {
      problems.push(`${message}`);
    }
    if (
      message.toLowerCase().includes("–º—É—Å–æ—Ä–æ–ø—Ä–æ–≤–æ–¥") ||
      message.toLowerCase().includes("–∫–∞–º–µ—Ä—ã")
    ) {
      problems.push(`${message}`);
    }

    // –ö–≤–∞—Ä—Ç–∏—Ä—ã
    const aptMatch = message.match(/\b(–∫–≤?\.?\s*(\d+)|–∫–≤–∞—Ä—Ç–∏—Ä–∞\s*(\d+))/gi);
    if (aptMatch) {
      aptMatch.forEach((apt) => {
        const aptNum = apt.match(/\d+/) ? apt.match(/\d+/)[0] : null;
        if (aptNum) {
          apartments[`–∫–≤ ${aptNum}`] = (apartments[`–∫–≤ ${aptNum}`] || 0) + 1;
        }
      });
    }

    // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    activeUsers[author] = (activeUsers[author] || 0) + 1;

    prompt += `[${time}] ${author}: ${message}\n`;
  });

  if (problems.length > 0) {
    prompt += "\nüí¨ –ü—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Å—É–∂–¥–∞–ª–∏ –∂–∏–ª—å—Ü—ã:\n";
    problems.forEach((problem) => {
      prompt += `  - ${problem}\n`;
    });
    console.log("üö® –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: ");
    problems.forEach((problem) => {
      console.log(`  - ${problem}`);
    });
  }

  if (Object.keys(apartments).length > 0) {
    prompt += "\nüè† –ö–≤–∞—Ä—Ç–∏—Ä—ã, —É–ø–æ–º—è–Ω—É—Ç—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:\n";
    Object.entries(apartments).forEach(([apt, count]) => {
      prompt += `  - ${apt}: ${count} ${
        count === 1 ? "—Å–æ–æ–±—â–µ–Ω–∏–µ" : "—Å–æ–æ–±—â–µ–Ω–∏–π"
      }\n`;
    });
  }

  prompt += "\nüë§ –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∂–∏–ª—å—Ü—ã:\n";
  Object.entries(activeUsers)
    .sort(([, a], [, b]) => b - a)
    .forEach(([author, count]) => {
      prompt += `  - ${author}: ${count} ${
        count === 1 ? "—Å–æ–æ–±—â–µ–Ω–∏–µ" : "—Å–æ–æ–±—â–µ–Ω–∏–π"
      }\n`;
    });

  prompt += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.";
  return prompt;
}

module.exports = {
  getMessagesFromLast24Hours,
  generatePrompt,
  generateEmbedding,
  storeEmbedding,
  findSimilarEmbeddings,
};
