const initDatabase = require("./db");
const db = initDatabase(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

const baileys = require("@whiskeysockets/baileys");
const qrcode = require("qrcode-terminal");

const makeWASocket = baileys.default;
const { useMultiFileAuthState, fetchLatestBaileysVersion, makeInMemoryStore } =
  baileys;

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ utils.js
const { getMessagesFromLast24Hours, generatePrompt } = require("./utils");
const sendToFireworks = require("./sendToFireworks.js"); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Fireworks AI

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
const insertMessageIntoDB = (author, text, time, created) => {
  return new Promise((resolve, reject) => {
    db.run(
      `INSERT INTO information (author, message, time, created) VALUES (?, ?, ?, ?)`,
      [author, text, time, created],
      (err) => {
        if (err) {
          reject("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:" + err.message);
        } else {
          resolve("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î");
        }
      }
    );
  });
};

// –í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ startBot
const startBot = async () => {
  const { state, saveCreds } = await useMultiFileAuthState("auth");
  const { version } = await fetchLatestBaileysVersion();

  const sock = makeWASocket({
    version,
    auth: state,
  });

  sock.ev.on("creds.update", saveCreds);

  sock.ev.on("connection.update", ({ connection, qr }) => {
    if (qr) {
      console.log("–°–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥:");
      qrcode.generate(qr, { small: true });
    }

    if (connection === "open") {
      console.log("‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ WhatsApp!");
      // –î–æ–±–∞–≤–∏–º –≤—ã–≤–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const chatId = "120363421292722557@g.us"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞
      printChatParticipants(sock, chatId); // –ü–æ–ª—É—á–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    }

    if (connection === "close") {
      console.log("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ");
    }
  });

  sock.ev.on("messages.upsert", async ({ messages, type }) => {
    if (type !== "notify") return;

    const msg = messages[0];
    const text =
      msg.message?.conversation || msg.message?.extendedTextMessage?.text;

    if (!text) {
      console.log("‚õî –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");
      return;
    }

    const author = msg.pushName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
    const time = new Date().toLocaleTimeString();
    const created = new Date().toISOString();

    console.log(`üì• –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: [${time}] ${author}: "${text}"`);

    try {
      // üíæ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É information
      await insertMessageIntoDB(author, text, time, created); // –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å—Ç–∞–≤–∫–∏

      // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
      if (text.toLowerCase().includes("sum")) {
        console.log("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ 'sum', —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...");
        // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å—Ç–∞–≤–∫–∏, –≤—ã–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        await analyzeMessages(); // –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
      }
    } catch (error) {
      console.error(error); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
    }
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
async function getChatParticipants(sock, chatId) {
  const metadata = await sock.groupMetadata(chatId);
  const participants = metadata.participants.map((p) => ({
    name: p.pushName,
    phone: p.id.split("@")[0],
  }));

  console.log("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞:");
  participants.forEach((p) => {
    console.log(`  - ${p.name} (${p.phone})`);
  });

  return participants;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async function printChatParticipants(sock, chatId) {
  const participants = await getChatParticipants(sock, chatId);
  console.log("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞:", participants);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async function analyzeMessages() {
  getMessagesFromLast24Hours((messages) => {
    const prompt = generatePrompt(messages); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º—Ç–∞ —Å —É—á—ë—Ç–æ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log("üìù –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç –¥–ª—è Fireworks AI:\n", prompt);
    sendToFireworks(prompt); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º—Ç –≤ –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å
  });
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
startBot();
